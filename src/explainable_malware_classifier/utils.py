import functools
import time
from pathlib import Path
from typing import Callable, Any

import numpy as np
from sklearn.model_selection import StratifiedShuffleSplit


def prompt_overwrite(file_path: Path) -> bool:
    """If file exists, prompt user whether to overwrite it."""
    if not file_path.exists():
        return True
    while True:
        user_input = input(
            f"File '{file_path}' already exists. Overwrite? (y/n): "
        ).lower()
        if user_input == "y":
            return True
        if user_input == "n":
            print(f"Skipping overwrite. File '{file_path}' remains unchanged.")
            return False
        print("Please enter 'y' or 'n'.")


def timer(func: Callable) -> Callable:
    """Print the runtime of the decorated function"""

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.perf_counter()
        value = func(*args, **kwargs)
        end_time = time.perf_counter()
        run_time = end_time - start_time
        print(f"Finished {func.__qualname__}() in {run_time:.2f} secs")
        return value

    return wrapper


def prompt_options(options: dict[str, Any]) -> tuple[Any, str]:
    option_names = list(options.keys())
    for i, option_name in enumerate(option_names):
        print(f"{i + 1}.", option_name)
    while True:
        user_input = input("Enter the option number: ")
        try:
            user_input = int(user_input) - 1
            option_name = option_names[user_input]
            option = options[option_name]
        except (ValueError, IndexError):
            print("Invalid input. Please try again.")
            continue
        break
    return option, option_name


def stratified_sample(
    X: np.ndarray, y: np.ndarray, *, size: int, random_state: int
) -> np.ndarray:
    sss = StratifiedShuffleSplit(n_splits=1, train_size=size, random_state=random_state)
    return X[next(sss.split(X, y))[0]]
