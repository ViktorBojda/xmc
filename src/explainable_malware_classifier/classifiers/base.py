import os
from abc import ABC, abstractmethod
from pathlib import Path

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

from explainable_malware_classifier.settings import PLOTS_DIR, MODELS_DIR_PATH


class BaseMalwareClassifier(ABC):
    DATASET_NAME = "preprocessed_merged_seq.csv"

    @property
    @abstractmethod
    def model_name(self): ...

    @property
    def model_path(self) -> Path:
        return MODELS_DIR_PATH / self.model_name

    def plot_confusion_matrix(
        self,
        y_true: pd.Series,
        y_pred: pd.Series,
        *,
        title: str,
        save_as: str | None = None,
    ) -> None:
        classes = self.label_encoder.classes_
        cm = confusion_matrix(y_true, y_pred, labels=classes, normalize="true")
        _, ax = plt.subplots(figsize=(5, 5))
        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)
        disp.plot(ax=ax, values_format=".2f")
        plt.title(title)
        plt.xticks(rotation=45)
        plt.tight_layout()
        if save_as is not None:
            plt.savefig(os.path.join(PLOTS_DIR, save_as), bbox_inches="tight")
        plt.show()

    @staticmethod
    def display_cv_results(scoring: str, scores: list[float]) -> None:
        print(f"Cross-Validation {scoring} scores:", [round(s, 4) for s in scores])
        print(f"Cross-Validation {scoring} mean:   {np.mean(scores):.4f}")
        print(f"Cross-Validation {scoring} std:    {np.std(scores, ddof=1):.4f}")
        print("-" * 50)

    @staticmethod
    def comma_tokenizer(text: str) -> list[str]:
        return text.split(",")

    @abstractmethod
    def load_and_transform_data(self): ...

    @abstractmethod
    def cross_validate(self, X, y, *, cv_splits, scoring): ...

    @abstractmethod
    def train_and_evaluate(self, X, y, *, test_size): ...

    @abstractmethod
    def save_model(self): ...

    @staticmethod
    @abstractmethod
    def load_model(): ...

    @abstractmethod
    def run(self): ...
