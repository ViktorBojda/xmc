from timeit import default_timer as timer

import joblib
import pandas as pd
from imblearn.ensemble import BalancedRandomForestClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.preprocessing import LabelEncoder


def comma_tokenizer(text: str) -> list:
    return text.split(",")


def main():
    start_time = timer()
    df = pd.read_csv("datasets/preprocessed_merged.csv")

    vectorizer = TfidfVectorizer(
        tokenizer=comma_tokenizer,
        token_pattern=None,
        min_df=5,
        max_df=0.9,
        ngram_range=(1, 1),
    )
    X = vectorizer.fit_transform(df["api"])
    label_encoder = LabelEncoder()
    y_encoded = label_encoder.fit_transform(df["class"])

    classifier = BalancedRandomForestClassifier(
        n_estimators=500,
        replacement=True,
        bootstrap=False,
        sampling_strategy="not majority",
        random_state=69,
        verbose=1,
        n_jobs=-1,
    )

    kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=69)
    cv_scores = cross_val_score(
        classifier, X, y_encoded, cv=kfold, scoring="f1_macro", verbose=1, n_jobs=-1
    )

    print("Cross-Validation F1 Macro scores:", cv_scores)
    print("Cross-Validation F1 Macro mean:  ", cv_scores.mean())
    print("Cross-Validation F1 Macro std:   ", cv_scores.std())
    print("-" * 50)

    X_train, X_test, y_train_encoded, y_test_encoded = train_test_split(
        X, y_encoded, test_size=0.2, random_state=69
    )
    classifier.fit(X_train, y_train_encoded)
    y_pred_encoded = classifier.predict(X_test)

    y_pred = label_encoder.inverse_transform(y_pred_encoded)
    y_test = label_encoder.inverse_transform(y_test_encoded)

    end_time = timer()

    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("-" * 50)
    print("Total Runtime:\n", round(end_time - start_time, 2))

    model_name = "brfc_model.pkl"
    joblib.dump((classifier, vectorizer, label_encoder), model_name)
    print(f"Model, vectorizer, and label encoder have been saved to {model_name}.")


if __name__ == "__main__":
    main()

# Cross-Validation F1 Macro scores: [0.74793602 0.77000448 0.74830535 0.75303668 0.73675809 0.7750543
#  0.74919314 0.7513593  0.74513045 0.74750489]
# Cross-Validation F1 Macro mean:   0.7524282697774279
# Cross-Validation F1 Macro std:    0.01092277694971424
# --------------------------------------------------
# Classification Report:
#                precision    recall  f1-score   support
#
#       adware       0.89      0.65      0.75       301
#     backdoor       0.92      0.71      0.80       354
#   downloader       0.75      0.77      0.76       244
#      dropper       0.52      0.72      0.60       168
#      spyware       0.42      0.55      0.47       152
#       trojan       0.89      0.98      0.93      2941
#        virus       1.00      0.88      0.93      1134
#        worms       0.85      0.57      0.68       343
#
#     accuracy                           0.87      5637
#    macro avg       0.78      0.73      0.74      5637
# weighted avg       0.88      0.87      0.87      5637
# --------------------------------------------------
# Total Runtime: 409.94
